import java.io.ByteArrayOutputStream;
import java.io.StringReader;
import java.io.UnsupportedEncodingException;
import java.util.NoSuchElementException;

import org.junit.Test;
import static org.junit.Assert.*;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class ExerciseQueueTest {
    /**
     * Runs the test input provided by the PW team, and checks against expected output
     */
    @Test public void providedTest() {
        String input = "10\n1 42\n2\n1 14\n3\n1 28\n3\n1 60\n1 78\n2\n2\n";
        String expectedOutput = "14\n14\n"; 
        compareQueueOutput(input, expectedOutput);
    }

    /**
     * Adds one element and peeks it
     */
    @Test public void oneElement() {
        String input = "2\n1 21\n3\n";
        String expectedOutput = "21\n";
        compareQueueOutput(input, expectedOutput);
    }

    /**
     * Tries to peek element that doesn't exist, checks correct expection is raised
     */
    @Test (expected = NoSuchElementException.class)
    public void peekEmptyQueue() {
        String input = "3\n1 21\n2\n3\n";
        ExerciseQueue classUnderTest = new ExerciseQueue();
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();

        classUnderTest.process(input, outputStream);
    }

    /**
     * Tries to remove element in an empty queue, checks correct expection is raised
     */
    @Test (expected = NoSuchElementException.class)
    public void removeTooManyElements() {
        String input = "3\n1 21\n2\n2\n";
        ExerciseQueue classUnderTest = new ExerciseQueue();
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();

        classUnderTest.process(input, outputStream);
    }

    /**
     * Compares output of ExerciseQueue to some input to an expected value
     */
    private void compareQueueOutput(String input, String expectedOutput) {
        ExerciseQueue classUnderTest = new ExerciseQueue();
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        classUnderTest.process(input, outputStream);

        try {
            String output = outputStream.toString("UTF8");
            assertEquals("Sample output and actual output must match.", expectedOutput, output);
        } catch (UnsupportedEncodingException e) {
            System.err.println("There is no UTF-8 support, which is required for this test");
        }
    }
}
